{"version":3,"sources":["webpack:///src/C:/Users/becky/projects/vue-migrate/v3-multi-view-app/src/src/App.vue","webpack:///src/views/C:/Users/becky/projects/vue-migrate/v3-multi-view-app/src/views/src/views/Home.vue","webpack:///src/views/C:/Users/becky/projects/vue-migrate/v3-multi-view-app/src/views/src/views/Survey.vue","webpack:///src/views/C:/Users/becky/projects/vue-migrate/v3-multi-view-app/src/views/src/views/Secrets.vue"],"names":[],"mappings":"AAaA,KACA,8CAAA,AACA,mCAAA,AACA,kCAAA,AACA,gBAAA,AACA,cAAA,AACA,UAAA,AACA,iBAAA,AACA,YAAA,AACA,cAAA,AACA,gBAAA,AACA,YAAA,CACA,AACA,UACA,gBAAA,AACA,SAAA,AACA,SAAA,CACA,ACkEA,wBACA,qBAAA,AACA,YAAA,AACA,eAAA,CACA,AACA,wBACA,sBAAA,AACA,aAAA,AACA,UAAA,CACA,AACA,wCAEA,eAAA,CACA,AACA,oBACA,qBAAA,AACA,SAAA,CACA,AACA,oBACA,qBAAA,AACA,aAAA,CACA,AACA,mBACA,aAAA,CACA,ACSA,wBACA,sBAAA,AACA,aAAA,AACA,UAAA,CACA,AACA,wCAEA,eAAA,CACA,AAEA,oBACA,qBAAA,AACA,SAAA,CACA,AAEA,mBACA,aAAA,CACA,ACjIA,4BACA,mBAAA,AACA,gBAAA,CACA","file":"app.b51d98ac.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n  color: #2c3e50;\n  width: 75%;\n  min-height: 100vh;\n  height: 100%;\n  margin: 0 auto;\n  background: #fff;\n  padding: 2rem;\n}\nbody, html {\n  background: #666;\n  margin: 0;\n  padding: 0;\n}\n</style>","<template>\n  <div class=\"home\">\n    <div class=\"form-container\" v-show=\"showForm\">\n      <!-- TODO: Modulate display of the .form-container using v-show and the showForm variable. -->\n      <h1>Join the Web Developers Club!</h1>\n      <p>Sign up to access our special, secret page. Just create an account and answer a brief survey.</p>\n      <!-- TODO: Add an HTML element to display an error message for when the user submits invalid information. Use v-show to show/hide this message based on the validity of the form data. -->\n      <p\n        class=\"error\"\n        v-show=\"showError\"\n      >Please check the information you have entered. Be sure to fill in all fields.</p>\n      <form v-on:submit.prevent=\"validateForm\">\n        <!-- TODO: Add the proper v-on directive to let the validateForm method handle this form when it is submitted -->\n        <!-- TODO: Add labels for each form field in this form. -->\n        <!-- TODO: Add a username field. -->\n        <!-- TODO: Add an email field. -->\n        <!-- TODO: Add a password field. -->\n        <!-- TODO: Add a passwordVerify field. -->\n        <p>\n          <label class=\"label\" for=\"username\">Username</label>\n          <input type=\"text\" id=\"username\" v-model=\"username\">\n        </p>\n\n        <p>\n          <label class=\"label\" for=\"email\">Email</label>\n          <input type=\"email\" id=\"email\" v-model=\"email\">\n        </p>\n\n        <p>\n          <label class=\"label\" for=\"password\">Password</label>\n          <input type=\"password\" id=\"password\" v-model=\"password\">\n        </p>\n        <p>\n          <label class=\"label\" for=\"passwordVerify\">Verify Password</label>\n          <input type=\"password\" id=\"passwordVerify\" v-model=\"passwordVerify\">\n        </p>\n\n        <p>\n          <input type=\"submit\" value=\"Submit\">\n        </p>\n      </form>\n    </div>\n\n    <div class=\"success-message\" v-show=\"!showForm\">\n      <!-- TODO: Modulate display of the .success-message using v-show and the showForm variable. -->\n      <h1>Thank you for signing up!</h1>\n\n      <p>Please take our new member survey.\n        <router-link to=\"/survey\">Click here</router-link>\n      </p>\n\n      <!-- TODO: Link \"Click here\" to the survey page. -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      passwordVerify: \"\",\n      showForm: true,\n      showError: false\n    };\n  },\n  methods: {\n    validateForm: function() {\n      // Validate the form by checking the following values:\n      // username must not be blank\n      // email must not be blank\n      // password and passwordVerify must be equal\n      //\n      // When the form is validated, show the .success-message content\n      // If the form is invalid, show the form error message\n      if (\n        this.username != \"\" &&\n        this.email != \"\" &&\n        this.password === this.passwordVerify\n      ) {\n        // Form data is valid, so turn off the form to show the success message.\n        this.showForm = false;\n      } else {\n        // Form data is NOT valid, so show the error message.\n        this.showError = true;\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.label {\n  display: inline-block;\n  width: 200px;\n  text-align: left;\n}\n.error {\n  border: 1px solid #aa0000;\n  padding: 1rem;\n  color: #aa0000;\n}\nh1,\nh2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>","<template>\r\n  <div class=\"survey\">\r\n      <h1>New Member Survey</h1>\r\n      <p>Please complete the new member survey.</p>\r\n      <form v-on:submit.prevent=\"validateForm\"> <!-- TODO: Set up the proper v-on directive to handle the form submission. -->\r\n        <!-- TODO: Add an error message to be displayed when the user submits invalid form data. -->\r\n        <p class=\"error\" v-show=\"showError\">Please check the information you have entered. Be sure to fill in all fields.</p>\r\n        <p><label for=\"q1\">Q1: How long have you been building websites?<br><input type=\"text\" id=\"q1\" v-model.number=\"q1\"></label></p><!-- TODO: Add the proper v-model directive to this input element. -->\r\n\r\n        <p>Q2: What languages interest you the most?<br>\r\n          <!-- TODO: Create a loop to duplicate the label element and structures it contains for each item in the languageOptions array. -->\r\n          <label v-for=\"language in languageOptions\" :key=\"language.value\">\r\n            <input type=\"checkbox\" v-model=\"q2\" :value=\"language.value\"><!-- TODO: Set the proper v-model directive and use v-bind:value to set the value for this checkbox. -->\r\n            <!-- TODO: Output the text to display this option to the user. -->\r\n            {{language.text}}\r\n          </label>\r\n        </p>\r\n\r\n        <p>Q3: What other topics interest you?<br>\r\n          <!-- TODO: Create a loop to duplicate the label element and structures it contains for each item in the topicOptions array. -->\r\n          <label v-for=\"topic in topicOptions\" :key=\"topic.value\">\r\n            <input type=\"checkbox\" v-model=\"q3\" :value=\"topic.value\"><!-- TODO: Set the proper v-model directive and use v-bind:value to set the value for this checkbox. -->\r\n            <!-- TODO: Output the text to display this option to the user. -->\r\n            {{topic.text}}\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label for=\"q4\">Q4: What kinds of websites would you like to build someday?<br>\r\n            <textarea cols=\"70\" rows=\"8\" id=\"q4\" v-model=\"q4\" placeholder=\"Type your response here.\"></textarea><!-- TODO: Set the proper v-model directive on this textarea. -->\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label for=\"q5\">Q5: Spaces or Tabs?\r\n            <select id=\"q5\" v-model=\"q5\"><!-- TODO: Set the proper v-model directive on this select element. -->\r\n              <option value=\"\">Select your preference.</option>\r\n              <option value=\"spaces\">Spaces</option>\r\n              <option value=\"tabs\">Tabs</option>\r\n            </select>\r\n          </label>\r\n        </p>\r\n        <p><input type=\"submit\" value=\"Submit\"></p>\r\n      </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Survey\",\r\n  data() {\r\n    return {\r\n      showError: false,\r\n      q1: \"\",\r\n      q2: [],\r\n      q3: [],\r\n      q4: \"\",\r\n      q5: \"\",\r\n      languageOptions: [\r\n        {\r\n          text: \"JavaScript\",\r\n          value: \"js\"\r\n        },\r\n        {\r\n          text: \"Python\",\r\n          value: \"py\"\r\n        },\r\n        {\r\n          text: \"Ruby\",\r\n          value: \"ruby\"\r\n        },\r\n        {\r\n          text: \"Java\",\r\n          value: \"java\"\r\n        },\r\n        {\r\n          text: \"PHP\",\r\n          value: \"php\"\r\n        }\r\n      ],\r\n      topicOptions: [\r\n        {\r\n          text: \"Accessibility\",\r\n          value: \"axe\"\r\n        },\r\n        {\r\n          text: \"Experience Design\",\r\n          value: \"ux\"\r\n        },\r\n        {\r\n          text: \"Operations\",\r\n          value: \"ops\"\r\n        },\r\n        {\r\n          text: \"Search Engine Optimization\",\r\n          value: \"seo\"\r\n        },\r\n        {\r\n          text: \"Multimedia\",\r\n          value: \"media\"\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    validateForm: function() {\r\n      // TODO: Validate the data submitted by the user according to these rules:\r\n      // q1 must not be blank\r\n      // q2.length must be greater than 0\r\n      // q3.length must be greater than 0\r\n      // q4 must not be blank\r\n      // q5 must not be blank\r\n      // TODO: If all of the data is valid, then use the $router to move the user to the Secret page.\r\n      // TODO: If the data is not valid, alter the value of showError to show the error message.\r\n      if ((this.q1 != '') &&\r\n        (this.q2.length > 0) &&\r\n        (this.q3.length > 0) &&\r\n        (this.q4 != '') &&\r\n        (this.q5 != '')) {\r\n      // Form is valid\r\n      this.$router.push('Secrets');\r\n    } else {\r\n      this.showError = true;\r\n    }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.error {\r\n  border: 1px solid #aa0000;\r\n  padding: 1rem;\r\n  color: #aa0000;\r\n}\r\nh1,\r\nh2 {\r\n  font-weight: normal;\r\n}\r\n\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\na {\r\n  color: #42b983;\r\n}\r\n</style>","<template>\r\n  <div class=\"component\">\r\n    <h2>{{ message }}</h2>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    data () {\r\n      return {\r\n        message: 'Good, better, best. Never let it rest. Til your good is better and your better is best. St. Jerome'\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .component {\r\n    background: #e8e8e8;\r\n    min-height: 400px;\r\n  }\r\n</style>"]}